//! Autogenerated weights for `dia_oracle`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// dia-oracle
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/all-weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight,constants::RocksDbWeight}};
use frame_support::sp_std::marker::PhantomData;

/// Weight functions for `dia_oracle`.
///
///
pub trait WeightInfo{
	fn add_currency() -> Weight ;
	fn remove_currency() -> Weight ;
	fn authorize_account() -> Weight ;
	fn authorize_account_signed() -> Weight ;
	fn deauthorize_account() -> Weight ;
	fn deauthorize_account_signed() -> Weight ;
	fn set_updated_coin_infos() -> Weight;
	fn set_batching_api() -> Weight;
}
pub struct DiaWeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for DiaWeightInfo<T> {
	/// Storage: DiaOracleModule AuthorizedAccounts (r:1 w:0)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: DiaOracleModule SupportedCurrencies (r:1 w:1)
	/// Proof Skipped: DiaOracleModule SupportedCurrencies (max_values: None, max_size: None, mode: Measured)
	fn add_currency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `7334`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_000_000, 0)
			.saturating_add(Weight::from_parts(0, 7334))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:1 w:0)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: DiaOracleModule SupportedCurrencies (r:1 w:0)
	/// Proof Skipped: DiaOracleModule SupportedCurrencies (max_values: None, max_size: None, mode: Measured)
	fn remove_currency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `7334`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 0)
			.saturating_add(Weight::from_parts(0, 7334))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:1 w:1)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	fn authorize_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3615`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3615))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:2 w:1)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	fn authorize_account_signed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `6127`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6127))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:1 w:0)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	fn deauthorize_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3615`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3615))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:2 w:1)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	fn deauthorize_account_signed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `6127`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6127))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:1 w:0)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: DiaOracleModule CoinInfosMap (r:0 w:1)
	/// Proof Skipped: DiaOracleModule CoinInfosMap (max_values: None, max_size: None, mode: Measured)
	fn set_updated_coin_infos() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3839`
		// Minimum execution time: 15_699_000_000 picoseconds.
		Weight::from_parts(15_772_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3839))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:1 w:0)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: DiaOracleModule BatchingApi (r:0 w:1)
	/// Proof Skipped: DiaOracleModule BatchingApi (max_values: Some(1), max_size: None, mode: Measured)
	fn set_batching_api() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3839`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3839))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

impl WeightInfo for () {
	/// Storage: DiaOracleModule AuthorizedAccounts (r:1 w:0)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: DiaOracleModule SupportedCurrencies (r:1 w:1)
	/// Proof Skipped: DiaOracleModule SupportedCurrencies (max_values: None, max_size: None, mode: Measured)
	fn add_currency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `7334`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_000_000, 0)
			.saturating_add(Weight::from_parts(0, 7334))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:1 w:0)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: DiaOracleModule SupportedCurrencies (r:1 w:0)
	/// Proof Skipped: DiaOracleModule SupportedCurrencies (max_values: None, max_size: None, mode: Measured)
	fn remove_currency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `7334`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 0)
			.saturating_add(Weight::from_parts(0, 7334))
			.saturating_add(RocksDbWeight::get().reads(2))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:1 w:1)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	fn authorize_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3615`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3615))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:2 w:1)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	fn authorize_account_signed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `6127`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6127))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:1 w:0)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	fn deauthorize_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3615`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3615))
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:2 w:1)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	fn deauthorize_account_signed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `6127`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6127))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:1 w:0)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: DiaOracleModule CoinInfosMap (r:0 w:1)
	/// Proof Skipped: DiaOracleModule CoinInfosMap (max_values: None, max_size: None, mode: Measured)
	fn set_updated_coin_infos() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3839`
		// Minimum execution time: 15_699_000_000 picoseconds.
		Weight::from_parts(15_772_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3839))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: DiaOracleModule AuthorizedAccounts (r:1 w:0)
	/// Proof Skipped: DiaOracleModule AuthorizedAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: DiaOracleModule BatchingApi (r:0 w:1)
	/// Proof Skipped: DiaOracleModule BatchingApi (max_values: Some(1), max_size: None, mode: Measured)
	fn set_batching_api() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3839`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3839))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}

